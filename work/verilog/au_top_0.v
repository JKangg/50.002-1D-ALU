/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_ledsA_d, M_ledsA_q = 1'h0;
  reg [15:0] M_ledsB_d, M_ledsB_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  localparam START_state = 2'd0;
  localparam INVALID_state = 2'd1;
  localparam MANUAL_state = 2'd2;
  localparam AUTO_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [20-1:0] M_autotest_out;
  testerfsm_3 autotest (
    .clk(clk),
    .rst(rst),
    .pause(io_dip[16+0+0-:1]),
    .restart(io_button[1+0-:1]),
    .out(M_autotest_out)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  wire [16-1:0] M_alumod_out;
  wire [3-1:0] M_alumod_zvn;
  wire [1-1:0] M_alumod_overflow;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  reg [6-1:0] M_alumod_alufn_signal;
  alu_4 alumod (
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alufn_signal(M_alumod_alufn_signal),
    .out(M_alumod_out),
    .zvn(M_alumod_zvn),
    .overflow(M_alumod_overflow)
  );
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [6-1:0] M_add_alufn_signal;
  adder_5 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn_signal(M_add_alufn_signal),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_store_alufn_d = M_store_alufn_q;
    M_ledsA_d = M_ledsA_q;
    M_ledsB_d = M_ledsB_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 20'h00000;
    io_sel = 4'hf;
    a = 8'h00;
    b = 8'h00;
    alufn = io_dip[0+2+5-:6];
    M_alumod_alufn_signal = alufn;
    M_alumod_a = a;
    M_alumod_b = b;
    alu = M_alumod_out;
    M_add_a = M_ledsA_q;
    M_add_b = M_ledsB_q;
    M_add_alufn_signal = alufn;
    io_led[0+7-:8] = a[0+7-:8];
    io_led[8+7-:8] = a[8+7-:8];
    io_led[0+6+0-:1] = M_add_v;
    
    case (M_state_q)
      START_state: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = AUTO_state;
        end
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      MANUAL_state: begin
        if (io_dip[0+1+0-:1]) begin
          a[0+7-:8] = io_dip[8+7-:8];
          a[8+7-:8] = io_dip[16+7-:8];
          if (io_button[3+0-:1]) begin
            M_ledsA_d = a;
          end
        end else begin
          b[0+7-:8] = io_dip[8+7-:8];
          b[8+7-:8] = io_dip[16+7-:8];
          if (io_button[4+0-:1]) begin
            M_ledsB_d = b;
          end
        end
        alufn = io_dip[0+2+5-:6];
        if (io_button[2+0-:1]) begin
          if (io_dip[0+2+5-:6] == 6'h06) begin
            M_state_d = INVALID_state;
          end else begin
            if (io_dip[0+2+5-:6] == 6'h0a) begin
              M_state_d = INVALID_state;
            end else begin
              if (io_dip[0+2+5-:6] == 6'h0e) begin
                M_state_d = INVALID_state;
              end else begin
                if (io_dip[0+2+5-:6] == 6'h10) begin
                  M_state_d = INVALID_state;
                end else begin
                  if (io_dip[0+2+5-:6] == 6'h11) begin
                    M_state_d = INVALID_state;
                  end else begin
                    if (io_dip[0+2+5-:6] == 6'h12) begin
                      M_state_d = INVALID_state;
                    end else begin
                      if (io_dip[0+2+5-:6] == 6'h13) begin
                        M_state_d = INVALID_state;
                      end else begin
                        if (io_dip[0+2+5-:6] == 6'h14) begin
                          M_state_d = INVALID_state;
                        end else begin
                          if (io_dip[0+2+5-:6] == 6'h15) begin
                            M_state_d = INVALID_state;
                          end else begin
                            if (io_dip[0+2+5-:6] == 6'h16) begin
                              M_state_d = INVALID_state;
                            end else begin
                              if (io_dip[0+2+5-:6] == 6'h17) begin
                                M_state_d = INVALID_state;
                              end else begin
                                if (io_dip[0+2+5-:6] == 6'h20) begin
                                  M_state_d = INVALID_state;
                                end else begin
                                  if (io_dip[0+2+5-:6] == 6'h21) begin
                                    M_state_d = INVALID_state;
                                  end else begin
                                    if (io_dip[0+2+5-:6] == 6'h22) begin
                                      M_state_d = INVALID_state;
                                    end else begin
                                      if (io_dip[0+2+5-:6] == 6'h23) begin
                                        M_state_d = INVALID_state;
                                      end else begin
                                        if (io_dip[0+2+5-:6] == 6'h24) begin
                                          M_state_d = INVALID_state;
                                        end else begin
                                          if (io_dip[0+2+5-:6] == 6'h25) begin
                                            M_state_d = INVALID_state;
                                          end else begin
                                            if (io_dip[0+2+5-:6] == 6'h26) begin
                                              M_state_d = INVALID_state;
                                            end else begin
                                              if (io_dip[0+2+5-:6] == 6'h27) begin
                                                M_state_d = INVALID_state;
                                              end else begin
                                                if (io_dip[0+2+5-:6] == 6'h2a) begin
                                                  M_state_d = INVALID_state;
                                                end else begin
                                                  if (io_dip[0+2+5-:6] == 6'h2d) begin
                                                    M_state_d = INVALID_state;
                                                  end else begin
                                                    if (io_dip[0+2+5-:6] == 6'h2e) begin
                                                      M_state_d = INVALID_state;
                                                    end else begin
                                                      if (io_dip[0+2+5-:6] == 6'h2f) begin
                                                        M_state_d = INVALID_state;
                                                      end else begin
                                                        if (io_dip[0+2+5-:6] == 6'h30) begin
                                                          M_state_d = INVALID_state;
                                                        end else begin
                                                          if (io_dip[0+2+5-:6] == 6'h31) begin
                                                            M_state_d = INVALID_state;
                                                          end else begin
                                                            if (io_dip[0+2+5-:6] == 6'h33) begin
                                                              M_state_d = INVALID_state;
                                                            end else begin
                                                              if (io_dip[0+2+5-:6] == 6'h35) begin
                                                                M_state_d = INVALID_state;
                                                              end else begin
                                                                if (io_dip[0+2+5-:6] == 6'h37) begin
                                                                  M_state_d = INVALID_state;
                                                                end else begin
                                                                  if (io_dip[0+2+5-:6] == 6'h38) begin
                                                                    M_state_d = INVALID_state;
                                                                  end else begin
                                                                    if (io_dip[0+2+5-:6] == 6'h39) begin
                                                                      M_state_d = INVALID_state;
                                                                    end else begin
                                                                      if (io_dip[0+2+5-:6] == 6'h3a) begin
                                                                        M_state_d = INVALID_state;
                                                                      end else begin
                                                                        if (io_dip[0+2+5-:6] == 6'h3b) begin
                                                                          M_state_d = INVALID_state;
                                                                        end else begin
                                                                          if (io_dip[0+2+5-:6] == 6'h3c) begin
                                                                            M_state_d = INVALID_state;
                                                                          end else begin
                                                                            if (io_dip[0+2+5-:6] == 6'h3d) begin
                                                                              M_state_d = INVALID_state;
                                                                            end else begin
                                                                              if (io_dip[0+2+5-:6] == 6'h3e) begin
                                                                                M_state_d = INVALID_state;
                                                                              end else begin
                                                                                if (io_dip[0+2+5-:6] == 6'h3f) begin
                                                                                  M_state_d = INVALID_state;
                                                                                end else begin
                                                                                  M_store_alufn_d = alufn;
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if (io_button[1+0-:1]) begin
          M_ledsA_d = 16'h0000;
          M_ledsB_d = 16'h0000;
          M_store_alufn_d = 6'h00;
        end
        M_alumod_a = M_ledsA_q;
        M_alumod_b = M_ledsB_q;
        M_alumod_alufn_signal = M_store_alufn_q;
        alu = M_alumod_out;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+0+0-:1] = 1'h1;
        io_led[0+7+0-:1] = M_alumod_zvn[0+0-:1];
        io_led[0+6+0-:1] = M_alumod_zvn[1+0-:1];
        io_led[0+5+0-:1] = M_alumod_zvn[2+0-:1];
        if (io_button[0+0-:1]) begin
          M_state_d = START_state;
        end
      end
      INVALID_state: begin
        M_alumod_alufn_signal = 7'h64;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h15;
        M_seg_values[5+4-:5] = 5'h15;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[0+0-:1]) begin
          M_state_d = START_state;
        end
      end
      AUTO_state: begin
        M_seg_values[15+4-:5] = 5'h16;
        M_seg_values[10+4-:5] = 5'h15;
        M_seg_values[5+4-:5] = 5'h00;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_seg_values = M_autotest_out;
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
          if (io_button[2+0-:1]) begin
            M_state_d = START_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ledsA_q <= 1'h0;
      M_ledsB_q <= 1'h0;
      M_store_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_ledsA_q <= M_ledsA_d;
      M_ledsB_q <= M_ledsB_d;
      M_store_alufn_q <= M_store_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
