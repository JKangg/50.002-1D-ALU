/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testerfsm_3 (
    input clk,
    input rst,
    input pause,
    input restart,
    output reg [19:0] out
  );
  
  
  
  localparam CLKSPEED = 5'h1a;
  
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  wire [1-1:0] M_alu_overflow;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_4 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .zvn(M_alu_zvn),
    .overflow(M_alu_overflow)
  );
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADDOVERFLOW_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam AND_state = 5'd4;
  localparam NAND_state = 5'd5;
  localparam OR_state = 5'd6;
  localparam NOR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam XNOR_state = 5'd9;
  localparam A_state = 5'd10;
  localparam NOTA_state = 5'd11;
  localparam NOTB_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHR_state = 5'd14;
  localparam SRA_state = 5'd15;
  localparam CMPEQ_state = 5'd16;
  localparam CMPLT_state = 5'd17;
  localparam CMPLE_state = 5'd18;
  localparam MULTIPLY_state = 5'd19;
  localparam ALUFNERROR_state = 5'd20;
  localparam END_state = 5'd21;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_state_q)
      START_state: begin
        M_alu_alufn_signal = 1'h0;
        out = 20'h00000;
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0000;
        if (restart == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_alufn_signal = 6'h00;
        M_alu_a = 16'h05f2;
        M_alu_b = 16'h1e8d;
        if (M_alu_out == 16'h247f) begin
          out = 20'h535be;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = ADDOVERFLOW_state;
        end
      end
      ADDOVERFLOW_state: begin
        M_alu_alufn_signal = 6'h00;
        M_alu_a = 16'h8001;
        M_alu_b = 16'h8000;
        if (M_alu_out == 16'h0001) begin
          out = 20'h53410;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu_alufn_signal = 6'h01;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0002;
        if (M_alu_out == 16'h0002) begin
          out = 20'hb5d7e;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu_alufn_signal = 6'h18;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'h3040) begin
          out = 20'h54dbe;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = NAND_state;
        end
      end
      NAND_state: begin
        M_alu_alufn_signal = 6'h19;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'hcfbf) begin
          out = 20'h9aa6d;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu_alufn_signal = 6'h1e;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'h32fc) begin
          out = 20'h057de;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = NOR_state;
        end
      end
      NOR_state: begin
        M_alu_alufn_signal = 6'h1f;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'hcd03) begin
          out = 20'h982be;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu_alufn_signal = 6'h16;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'h02bc) begin
          out = 20'hb02be;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = XNOR_state;
        end
      end
      XNOR_state: begin
        M_alu_alufn_signal = 6'h17;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'hfd43) begin
          out = 20'hb4c15;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu_alufn_signal = 6'h1a;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'h3250) begin
          out = 20'h57bde;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = NOTA_state;
        end
      end
      NOTA_state: begin
        M_alu_alufn_signal = 6'h1b;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'hcdaf) begin
          out = 20'h9815e;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = NOTB_state;
        end
      end
      NOTB_state: begin
        M_alu_alufn_signal = 6'h1d;
        M_alu_a = 16'h3250;
        M_alu_b = 16'h30ec;
        if (M_alu_out == 16'hcf13) begin
          out = 20'h9817e;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu_alufn_signal = 6'h28;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0002;
        if (M_alu_out == 16'h0010) begin
          out = 20'hb465e;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu_alufn_signal = 6'h29;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0002;
        if (M_alu_out == 16'h0001) begin
          out = 20'hb46be;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu_alufn_signal = 6'h2b;
        M_alu_a = 16'h8010;
        M_alu_b = 16'h0002;
        if (M_alu_out == 16'he004) begin
          out = 20'hb555e;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu_alufn_signal = 6'h32;
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0000;
        if (M_alu_out == 16'h0001) begin
          out = 20'h63bde;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu_alufn_signal = 6'h34;
        M_alu_a = 16'h0050;
        M_alu_b = 16'h0050;
        if (M_alu_out == 16'h0001) begin
          out = 20'h64ade;
        end else begin
          out = 20'h9b256;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu_alufn_signal = 6'h36;
        M_alu_a = 16'h2010;
        M_alu_b = 16'h0480;
        if (M_alu_out == 16'h0001) begin
          out = 20'h649de;
        end else begin
          out = 20'h9824e;
        end
        if (pause == 1'h0) begin
          M_state_d = MULTIPLY_state;
        end
      end
      MULTIPLY_state: begin
        M_alu_alufn_signal = 6'h02;
        M_alu_a = 16'h0002;
        M_alu_b = 16'h0004;
        if (M_alu_out == 16'h0008) begin
          out = 20'h9cef2;
        end else begin
          out = 20'h756be;
        end
        if (pause == 1'h0) begin
          M_state_d = ALUFNERROR_state;
        end
      end
      ALUFNERROR_state: begin
        M_alu_alufn_signal = 6'h0a;
        M_alu_a = 16'h0002;
        M_alu_b = 16'h0004;
        if (M_alu_out == 16'h0008) begin
          out = 20'h535be;
        end else begin
          out = 20'h5426e;
        end
        if (pause == 1'h0) begin
          M_state_d = END_state;
        end
      end
      END_state: begin
        out = 20'h74dbe;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn_signal = 1'h0;
        if (restart == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      default: begin
        M_state_d = START_state;
        out = 20'hf7bde;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn_signal = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge M_counter_q[25+0-:1]) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
